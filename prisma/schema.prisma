// Voxelbox Database Schema
// Based on Maverick platform specifications

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Voxelbox specific fields
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  businesses    Business[]
  projects      Project[]
  messages      Message[]
  workItems     WorkItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core Voxelbox Models

model Business {
  id              String   @id @default(cuid())
  name            String
  description     String?
  industry        String?
  stage           BusinessStage @default(FORMING)
  formationStatus Json?    // Legal docs, EIN, state info
  squareData      Json?    // Square merchant info, payment processing
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects        Project[]
  formations      BusinessFormation[]
  squareConnections SquareConnection[]
}

model Project {
  id              String      @id @default(cuid())
  name            String
  description     String?
  type            ProjectType @default(SOFTWARE)
  status          ProjectStatus @default(PLANNING)
  githubRepoUrl   String?
  aiAgentPreference String?   // Which AI persona to use
  metadata        Json?       // Flexible project-specific data
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relationships
  businessId      String
  business        Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  
  documents       Document[]
  workItems       WorkItem[]
  aiConversations AIConversation[]
  templateUsages  TemplateUsage[]
}

model Document {
  id                String        @id @default(cuid())
  title             String
  type              DocumentType  @default(CANVAS)
  content           Json          // Rich document structure
  aiContext         String?       // System prompt context for this doc
  collaborationMode CollabMode    @default(HYBRID)
  status            DocumentStatus @default(DRAFT)
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relationships
  projectId         String
  project           Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdById       String
  createdBy         User          @relation(fields: [createdById], references: [id])
  
  messages          Message[]
}

model Message {
  id              String      @id @default(cuid())
  content         String      @db.Text
  senderType      SenderType
  senderId        String      // User ID or agent name
  messageType     MessageType @default(TEXT)
  aiContext       Json?       // Metadata about AI response
  parentMessageId String?     // For threading
  
  createdAt       DateTime    @default(now())
  
  // Relationships
  documentId      String?
  document        Document?   @relation(fields: [documentId], references: [id], onDelete: Cascade)
  conversationId  String?
  conversation    AIConversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])
  
  parentMessage   Message?    @relation("MessageThread", fields: [parentMessageId], references: [id])
  replies         Message[]   @relation("MessageThread")
}

model WorkItem {
  id                String     @id @default(cuid())
  title             String
  description       String     @db.Text
  status            WorkItemStatus @default(PENDING)
  priority          Priority   @default(MEDIUM)
  githubIssueNumber Int?
  githubPrNumber    Int?
  acceptanceCriteria Json?
  aiGenerated       Boolean    @default(false)
  estimatedEffort   String?
  metadata          Json?
  
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  // Relationships
  projectId         String
  project           Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedToId      String?
  assignedTo        User?      @relation(fields: [assignedToId], references: [id])
  createdById       String
  createdBy         User       @relation(fields: [createdById], references: [id])
  
  parentId          String?
  parent            WorkItem?  @relation("WorkItemHierarchy", fields: [parentId], references: [id])
  children          WorkItem[] @relation("WorkItemHierarchy")
}

model AIConversation {
  id              String            @id @default(cuid())
  type            ConversationType  @default(VIBE_CHAT)
  title           String?
  systemPrompt    String?           @db.Text
  context         Json?             // Project info, work items, etc.
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relationships
  projectId       String
  project         Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  messages        Message[]
}

model BusinessFormation {
  id              String              @id @default(cuid())
  entityType      EntityType
  state           String
  status          FormationStatus     @default(INITIATED)
  documents       Json?               // Generated documents
  filingData      Json?               // State filing information
  einStatus       EINStatus          @default(PENDING)
  ein             String?
  
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  // Relationships
  businessId      String
  business        Business           @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model SquareConnection {
  id              String    @id @default(cuid())
  merchantId      String    @unique
  accessToken     String    @db.Text
  refreshToken    String?   @db.Text
  setupStatus     String    @default("pending")
  permissions     Json?     // Square permissions granted
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relationships
  businessId      String
  business        Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model Template {
  id              String     @id @default(cuid())
  name            String
  description     String     @db.Text
  category        String
  industry        String?
  techStack       Json?      // Technology stack information
  structure       Json       // Project structure and files
  metadata        Json?      // Success metrics, author info, etc.
  isPublic        Boolean    @default(false)
  downloadCount   Int        @default(0)
  successRate     Float?     // Success metrics from users
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  // Relationships
  authorId        String
  author          User       @relation(fields: [authorId], references: [id])
  
  usages          TemplateUsage[]
}

model TemplateUsage {
  id          String   @id @default(cuid())
  successful  Boolean?
  feedback    String?
  
  createdAt   DateTime @default(now())
  
  // Relationships
  templateId  String
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Enums

enum BusinessStage {
  FORMING
  ACTIVE
  SCALING
  ARCHIVED
}

enum ProjectType {
  SOFTWARE
  MARKETING
  OPERATIONS
  LEGAL
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum DocumentType {
  PRD
  SPEC
  CANVAS
  CHAT
  CODE_REVIEW
}

enum CollabMode {
  CANVAS
  CHAT
  HYBRID
}

enum DocumentStatus {
  DRAFT
  REVIEW
  APPROVED
  ARCHIVED
}

enum SenderType {
  USER
  AI_AGENT
  SYSTEM
}

enum MessageType {
  TEXT
  CODE
  IMAGE
  FILE
}

enum WorkItemStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  COMPLETED
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ConversationType {
  VIBE_CHAT
  DEVELOPMENT
  REVIEW
  PLANNING
}

enum EntityType {
  LLC
  C_CORP
  S_CORP
  PARTNERSHIP
}

enum FormationStatus {
  INITIATED
  DOCUMENTS_GENERATED
  FILED
  APPROVED
  COMPLETED
}

enum EINStatus {
  PENDING
  FILED
  APPROVED
  COMPLETED
}